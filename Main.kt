// Создать три будильника которые начинают работать одновременно.
// Но первый будильник прозвенит через 5 секунд, второй - через 7,
// третий - через 10 секунд.
// После начала работы каждый из будильников каждую секунду производит только ему присущий звук.
// После того, как будильник прозвенит, он перестает тикать.

// Асинхронное задачи - задачи которая выполняется асихронно, то есть без ожидания завершения

// Корутина это концепция предназначенная для упрощения работы с асинхронными задачами.
// Это некий поток которы работает в пределах основного потока программы, но может быть приостоновлен и запущен в любой момент

import kotlinx.coroutines.*

// runBlocking - это функция в библиотеке kotlinx.coroutines, предоставляющая простой способ запуска корутин
// эта функция блокирует основной поток программы, и возобновит его после того как корутина внутри RunBlocking не закончится
fun main() = runBlocking {
// Создание трех корутин для запуска асинхронных задач
    val zvn1 = launch { Sound("pip", 5) }
    val zvn2 = launch { Sound("zhzh", 7) }
    val zvn3 = launch { Sound("tick", 10) }

    // Ждем завершения каждой из трех корутин
    zvn1.join()
    zvn2.join()
    zvn3.join()
}
// Ключевое слово "suspend" используется для пррисотановки функции на определенный промежуток времени, в данном блоке на 1 секунду
// Функция для эмуляции звукового сигнала с использованием корутины
suspend fun Sound(sound: String, seconds: Int) {
    // Повторяем вывод звукового сигнала каждую секунду
    repeat(seconds) {
        print("$sound ")
        delay(1000)
    }
    println("= Конец будильника")
}

